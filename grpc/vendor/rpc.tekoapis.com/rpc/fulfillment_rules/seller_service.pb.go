// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/fulfillment_rules/v1/seller_service.proto

package fulfillment_rules

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CreateSellerRequest
type CreateSellerRequest struct {
	SellerCenterId       uint32     `protobuf:"varint,1,opt,name=seller_center_id,proto3" json:"seller_center_id,omitempty"`
	Code                 string     `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	IsAllowAutoProcess   bool       `protobuf:"varint,3,opt,name=is_allow_auto_process,proto3" json:"is_allow_auto_process,omitempty"`
	IsImportWithoutStore bool       `protobuf:"varint,4,opt,name=is_import_without_store,proto3" json:"is_import_without_store,omitempty"`
	DefaultInventory     *Inventory `protobuf:"bytes,5,opt,name=default_inventory,proto3" json:"default_inventory,omitempty"`
	// payment_epsilon: max amount of money deviation allowed to fully paid
	PaymentEpsilon uint64 `protobuf:"varint,6,opt,name=payment_epsilon,proto3" json:"payment_epsilon,omitempty"`
	// is_skip_coupon: is allowed allocate promotion by coupon
	IsSkipCoupon bool `protobuf:"varint,7,opt,name=is_skip_coupon,proto3" json:"is_skip_coupon,omitempty"`
	// is_allocate_order_promotion: is allowed allocate promotion by whole order
	IsAllocateOrderPromotion bool `protobuf:"varint,8,opt,name=is_allocate_order_promotion,proto3" json:"is_allocate_order_promotion,omitempty"`
	// is_allocate_none_order_promotion: is allowed allocate promotion by each items in the order
	IsAllocateNoneOrderPromotion bool     `protobuf:"varint,9,opt,name=is_allocate_none_order_promotion,proto3" json:"is_allocate_none_order_promotion,omitempty"`
	IsApplyRelativeAllocation    bool     `protobuf:"varint,10,opt,name=is_apply_relative_allocation,proto3" json:"is_apply_relative_allocation,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *CreateSellerRequest) Reset()         { *m = CreateSellerRequest{} }
func (m *CreateSellerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSellerRequest) ProtoMessage()    {}
func (*CreateSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{0}
}
func (m *CreateSellerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSellerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSellerRequest.Merge(m, src)
}
func (m *CreateSellerRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSellerRequest proto.InternalMessageInfo

func (m *CreateSellerRequest) GetSellerCenterId() uint32 {
	if m != nil {
		return m.SellerCenterId
	}
	return 0
}

func (m *CreateSellerRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CreateSellerRequest) GetIsAllowAutoProcess() bool {
	if m != nil {
		return m.IsAllowAutoProcess
	}
	return false
}

func (m *CreateSellerRequest) GetIsImportWithoutStore() bool {
	if m != nil {
		return m.IsImportWithoutStore
	}
	return false
}

func (m *CreateSellerRequest) GetDefaultInventory() *Inventory {
	if m != nil {
		return m.DefaultInventory
	}
	return nil
}

func (m *CreateSellerRequest) GetPaymentEpsilon() uint64 {
	if m != nil {
		return m.PaymentEpsilon
	}
	return 0
}

func (m *CreateSellerRequest) GetIsSkipCoupon() bool {
	if m != nil {
		return m.IsSkipCoupon
	}
	return false
}

func (m *CreateSellerRequest) GetIsAllocateOrderPromotion() bool {
	if m != nil {
		return m.IsAllocateOrderPromotion
	}
	return false
}

func (m *CreateSellerRequest) GetIsAllocateNoneOrderPromotion() bool {
	if m != nil {
		return m.IsAllocateNoneOrderPromotion
	}
	return false
}

func (m *CreateSellerRequest) GetIsApplyRelativeAllocation() bool {
	if m != nil {
		return m.IsApplyRelativeAllocation
	}
	return false
}

// CreateSellerResponse
type CreateSellerResponse struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSellerResponse) Reset()         { *m = CreateSellerResponse{} }
func (m *CreateSellerResponse) String() string { return proto.CompactTextString(m) }
func (*CreateSellerResponse) ProtoMessage()    {}
func (*CreateSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{1}
}
func (m *CreateSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSellerResponse.Merge(m, src)
}
func (m *CreateSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSellerResponse proto.InternalMessageInfo

func (m *CreateSellerResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// ListSellerRequest
type ListSellerRequest struct {
	Limit                uint32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor               string   `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSellerRequest) Reset()         { *m = ListSellerRequest{} }
func (m *ListSellerRequest) String() string { return proto.CompactTextString(m) }
func (*ListSellerRequest) ProtoMessage()    {}
func (*ListSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{2}
}
func (m *ListSellerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSellerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSellerRequest.Merge(m, src)
}
func (m *ListSellerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSellerRequest proto.InternalMessageInfo

func (m *ListSellerRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListSellerRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

// ListSellerResponse
type ListSellerResponse struct {
	NextCursor           string    `protobuf:"bytes,1,opt,name=next_cursor,proto3" json:"next_cursor,omitempty"`
	Sellers              []*Seller `protobuf:"bytes,2,rep,name=sellers,proto3" json:"sellers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListSellerResponse) Reset()         { *m = ListSellerResponse{} }
func (m *ListSellerResponse) String() string { return proto.CompactTextString(m) }
func (*ListSellerResponse) ProtoMessage()    {}
func (*ListSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{3}
}
func (m *ListSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSellerResponse.Merge(m, src)
}
func (m *ListSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSellerResponse proto.InternalMessageInfo

func (m *ListSellerResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ListSellerResponse) GetSellers() []*Seller {
	if m != nil {
		return m.Sellers
	}
	return nil
}

// GetSellerRequest
type GetSellerRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSellerRequest) Reset()         { *m = GetSellerRequest{} }
func (m *GetSellerRequest) String() string { return proto.CompactTextString(m) }
func (*GetSellerRequest) ProtoMessage()    {}
func (*GetSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{4}
}
func (m *GetSellerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSellerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSellerRequest.Merge(m, src)
}
func (m *GetSellerRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSellerRequest proto.InternalMessageInfo

func (m *GetSellerRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetSellerResponse
type GetSellerResponse struct {
	Seller               *Seller  `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSellerResponse) Reset()         { *m = GetSellerResponse{} }
func (m *GetSellerResponse) String() string { return proto.CompactTextString(m) }
func (*GetSellerResponse) ProtoMessage()    {}
func (*GetSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{5}
}
func (m *GetSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSellerResponse.Merge(m, src)
}
func (m *GetSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSellerResponse proto.InternalMessageInfo

func (m *GetSellerResponse) GetSeller() *Seller {
	if m != nil {
		return m.Seller
	}
	return nil
}

// UpdateSellerRequest
type UpdateSellerRequest struct {
	Id                   uint32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SellerCenterId       uint32     `protobuf:"varint,2,opt,name=seller_center_id,proto3" json:"seller_center_id,omitempty"`
	Code                 string     `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	IsAllowAutoProcess   bool       `protobuf:"varint,4,opt,name=is_allow_auto_process,proto3" json:"is_allow_auto_process,omitempty"`
	IsImportWithoutStore bool       `protobuf:"varint,5,opt,name=is_import_without_store,proto3" json:"is_import_without_store,omitempty"`
	DefaultInventory     *Inventory `protobuf:"bytes,6,opt,name=default_inventory,proto3" json:"default_inventory,omitempty"`
	// payment_epsilon: max amount of money deviation allowed to fully paid
	PaymentEpsilon uint64 `protobuf:"varint,7,opt,name=payment_epsilon,proto3" json:"payment_epsilon,omitempty"`
	// is_skip_coupon: is allowed allocate promotion by coupon
	IsSkipCoupon bool `protobuf:"varint,8,opt,name=is_skip_coupon,proto3" json:"is_skip_coupon,omitempty"`
	// is_allocate_order_promotion: is allowed allocate promotion by whole order
	IsAllocateOrderPromotion bool `protobuf:"varint,9,opt,name=is_allocate_order_promotion,proto3" json:"is_allocate_order_promotion,omitempty"`
	// is_allocate_none_order_promotion: is allowed allocate promotion by each items in the order
	IsAllocateNoneOrderPromotion bool     `protobuf:"varint,10,opt,name=is_allocate_none_order_promotion,proto3" json:"is_allocate_none_order_promotion,omitempty"`
	IsApplyRelativeAllocation    bool     `protobuf:"varint,11,opt,name=is_apply_relative_allocation,proto3" json:"is_apply_relative_allocation,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *UpdateSellerRequest) Reset()         { *m = UpdateSellerRequest{} }
func (m *UpdateSellerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSellerRequest) ProtoMessage()    {}
func (*UpdateSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{6}
}
func (m *UpdateSellerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSellerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSellerRequest.Merge(m, src)
}
func (m *UpdateSellerRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSellerRequest proto.InternalMessageInfo

func (m *UpdateSellerRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateSellerRequest) GetSellerCenterId() uint32 {
	if m != nil {
		return m.SellerCenterId
	}
	return 0
}

func (m *UpdateSellerRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *UpdateSellerRequest) GetIsAllowAutoProcess() bool {
	if m != nil {
		return m.IsAllowAutoProcess
	}
	return false
}

func (m *UpdateSellerRequest) GetIsImportWithoutStore() bool {
	if m != nil {
		return m.IsImportWithoutStore
	}
	return false
}

func (m *UpdateSellerRequest) GetDefaultInventory() *Inventory {
	if m != nil {
		return m.DefaultInventory
	}
	return nil
}

func (m *UpdateSellerRequest) GetPaymentEpsilon() uint64 {
	if m != nil {
		return m.PaymentEpsilon
	}
	return 0
}

func (m *UpdateSellerRequest) GetIsSkipCoupon() bool {
	if m != nil {
		return m.IsSkipCoupon
	}
	return false
}

func (m *UpdateSellerRequest) GetIsAllocateOrderPromotion() bool {
	if m != nil {
		return m.IsAllocateOrderPromotion
	}
	return false
}

func (m *UpdateSellerRequest) GetIsAllocateNoneOrderPromotion() bool {
	if m != nil {
		return m.IsAllocateNoneOrderPromotion
	}
	return false
}

func (m *UpdateSellerRequest) GetIsApplyRelativeAllocation() bool {
	if m != nil {
		return m.IsApplyRelativeAllocation
	}
	return false
}

// UpdateSellerResponse
type UpdateSellerResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSellerResponse) Reset()         { *m = UpdateSellerResponse{} }
func (m *UpdateSellerResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSellerResponse) ProtoMessage()    {}
func (*UpdateSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{7}
}
func (m *UpdateSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSellerResponse.Merge(m, src)
}
func (m *UpdateSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSellerResponse proto.InternalMessageInfo

func (m *UpdateSellerResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// UpdateSellerBySellerCenterIdRequest
type UpdateSellerBySellerCenterIdRequest struct {
	SellerCenterId       uint32     `protobuf:"varint,1,opt,name=seller_center_id,proto3" json:"seller_center_id,omitempty"`
	Code                 string     `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	IsAllowAutoProcess   bool       `protobuf:"varint,3,opt,name=is_allow_auto_process,proto3" json:"is_allow_auto_process,omitempty"`
	IsImportWithoutStore bool       `protobuf:"varint,4,opt,name=is_import_without_store,proto3" json:"is_import_without_store,omitempty"`
	DefaultInventory     *Inventory `protobuf:"bytes,5,opt,name=default_inventory,proto3" json:"default_inventory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateSellerBySellerCenterIdRequest) Reset()         { *m = UpdateSellerBySellerCenterIdRequest{} }
func (m *UpdateSellerBySellerCenterIdRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSellerBySellerCenterIdRequest) ProtoMessage()    {}
func (*UpdateSellerBySellerCenterIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{8}
}
func (m *UpdateSellerBySellerCenterIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSellerBySellerCenterIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSellerBySellerCenterIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSellerBySellerCenterIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSellerBySellerCenterIdRequest.Merge(m, src)
}
func (m *UpdateSellerBySellerCenterIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSellerBySellerCenterIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSellerBySellerCenterIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSellerBySellerCenterIdRequest proto.InternalMessageInfo

func (m *UpdateSellerBySellerCenterIdRequest) GetSellerCenterId() uint32 {
	if m != nil {
		return m.SellerCenterId
	}
	return 0
}

func (m *UpdateSellerBySellerCenterIdRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *UpdateSellerBySellerCenterIdRequest) GetIsAllowAutoProcess() bool {
	if m != nil {
		return m.IsAllowAutoProcess
	}
	return false
}

func (m *UpdateSellerBySellerCenterIdRequest) GetIsImportWithoutStore() bool {
	if m != nil {
		return m.IsImportWithoutStore
	}
	return false
}

func (m *UpdateSellerBySellerCenterIdRequest) GetDefaultInventory() *Inventory {
	if m != nil {
		return m.DefaultInventory
	}
	return nil
}

// UpdateSellerBySellerCenterIdResponse
type UpdateSellerBySellerCenterIdResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSellerBySellerCenterIdResponse) Reset()         { *m = UpdateSellerBySellerCenterIdResponse{} }
func (m *UpdateSellerBySellerCenterIdResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSellerBySellerCenterIdResponse) ProtoMessage()    {}
func (*UpdateSellerBySellerCenterIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{9}
}
func (m *UpdateSellerBySellerCenterIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSellerBySellerCenterIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSellerBySellerCenterIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSellerBySellerCenterIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSellerBySellerCenterIdResponse.Merge(m, src)
}
func (m *UpdateSellerBySellerCenterIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSellerBySellerCenterIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSellerBySellerCenterIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSellerBySellerCenterIdResponse proto.InternalMessageInfo

func (m *UpdateSellerBySellerCenterIdResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DeleteSellerRequest
type DeleteSellerRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSellerRequest) Reset()         { *m = DeleteSellerRequest{} }
func (m *DeleteSellerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSellerRequest) ProtoMessage()    {}
func (*DeleteSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{10}
}
func (m *DeleteSellerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSellerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSellerRequest.Merge(m, src)
}
func (m *DeleteSellerRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSellerRequest proto.InternalMessageInfo

func (m *DeleteSellerRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// DeleteSellerResponse
type DeleteSellerResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSellerResponse) Reset()         { *m = DeleteSellerResponse{} }
func (m *DeleteSellerResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteSellerResponse) ProtoMessage()    {}
func (*DeleteSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{11}
}
func (m *DeleteSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSellerResponse.Merge(m, src)
}
func (m *DeleteSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSellerResponse proto.InternalMessageInfo

func (m *DeleteSellerResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// UpdateBizConfigSellerRequest
type UpdateBizConfigSellerRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentDurationSec   uint32   `protobuf:"varint,2,opt,name=payment_duration_sec,proto3" json:"payment_duration_sec,omitempty"`
	ApprovalDurationSec  uint32   `protobuf:"varint,3,opt,name=approval_duration_sec,proto3" json:"approval_duration_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBizConfigSellerRequest) Reset()         { *m = UpdateBizConfigSellerRequest{} }
func (m *UpdateBizConfigSellerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBizConfigSellerRequest) ProtoMessage()    {}
func (*UpdateBizConfigSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{12}
}
func (m *UpdateBizConfigSellerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBizConfigSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBizConfigSellerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBizConfigSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBizConfigSellerRequest.Merge(m, src)
}
func (m *UpdateBizConfigSellerRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBizConfigSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBizConfigSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBizConfigSellerRequest proto.InternalMessageInfo

func (m *UpdateBizConfigSellerRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateBizConfigSellerRequest) GetPaymentDurationSec() uint32 {
	if m != nil {
		return m.PaymentDurationSec
	}
	return 0
}

func (m *UpdateBizConfigSellerRequest) GetApprovalDurationSec() uint32 {
	if m != nil {
		return m.ApprovalDurationSec
	}
	return 0
}

// UpdateBizConfigSellerResponse
type UpdateBizConfigSellerResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBizConfigSellerResponse) Reset()         { *m = UpdateBizConfigSellerResponse{} }
func (m *UpdateBizConfigSellerResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBizConfigSellerResponse) ProtoMessage()    {}
func (*UpdateBizConfigSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{13}
}
func (m *UpdateBizConfigSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBizConfigSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBizConfigSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBizConfigSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBizConfigSellerResponse.Merge(m, src)
}
func (m *UpdateBizConfigSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBizConfigSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBizConfigSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBizConfigSellerResponse proto.InternalMessageInfo

func (m *UpdateBizConfigSellerResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// GetBizConfigBySellerIdRequest
type GetBizConfigBySellerIdRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBizConfigBySellerIdRequest) Reset()         { *m = GetBizConfigBySellerIdRequest{} }
func (m *GetBizConfigBySellerIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetBizConfigBySellerIdRequest) ProtoMessage()    {}
func (*GetBizConfigBySellerIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{14}
}
func (m *GetBizConfigBySellerIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBizConfigBySellerIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBizConfigBySellerIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBizConfigBySellerIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBizConfigBySellerIdRequest.Merge(m, src)
}
func (m *GetBizConfigBySellerIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBizConfigBySellerIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBizConfigBySellerIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBizConfigBySellerIdRequest proto.InternalMessageInfo

func (m *GetBizConfigBySellerIdRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetBizConfigBySellerIdResponse
type GetBizConfigBySellerIdResponse struct {
	PaymentDurationSec   uint32   `protobuf:"varint,1,opt,name=payment_duration_sec,proto3" json:"payment_duration_sec,omitempty"`
	ApprovalDurationSec  uint32   `protobuf:"varint,2,opt,name=approval_duration_sec,proto3" json:"approval_duration_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBizConfigBySellerIdResponse) Reset()         { *m = GetBizConfigBySellerIdResponse{} }
func (m *GetBizConfigBySellerIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetBizConfigBySellerIdResponse) ProtoMessage()    {}
func (*GetBizConfigBySellerIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a729fcb5609a32b, []int{15}
}
func (m *GetBizConfigBySellerIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBizConfigBySellerIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBizConfigBySellerIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBizConfigBySellerIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBizConfigBySellerIdResponse.Merge(m, src)
}
func (m *GetBizConfigBySellerIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBizConfigBySellerIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBizConfigBySellerIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBizConfigBySellerIdResponse proto.InternalMessageInfo

func (m *GetBizConfigBySellerIdResponse) GetPaymentDurationSec() uint32 {
	if m != nil {
		return m.PaymentDurationSec
	}
	return 0
}

func (m *GetBizConfigBySellerIdResponse) GetApprovalDurationSec() uint32 {
	if m != nil {
		return m.ApprovalDurationSec
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateSellerRequest)(nil), "fulfillment_rules.v1.CreateSellerRequest")
	proto.RegisterType((*CreateSellerResponse)(nil), "fulfillment_rules.v1.CreateSellerResponse")
	proto.RegisterType((*ListSellerRequest)(nil), "fulfillment_rules.v1.ListSellerRequest")
	proto.RegisterType((*ListSellerResponse)(nil), "fulfillment_rules.v1.ListSellerResponse")
	proto.RegisterType((*GetSellerRequest)(nil), "fulfillment_rules.v1.GetSellerRequest")
	proto.RegisterType((*GetSellerResponse)(nil), "fulfillment_rules.v1.GetSellerResponse")
	proto.RegisterType((*UpdateSellerRequest)(nil), "fulfillment_rules.v1.UpdateSellerRequest")
	proto.RegisterType((*UpdateSellerResponse)(nil), "fulfillment_rules.v1.UpdateSellerResponse")
	proto.RegisterType((*UpdateSellerBySellerCenterIdRequest)(nil), "fulfillment_rules.v1.UpdateSellerBySellerCenterIdRequest")
	proto.RegisterType((*UpdateSellerBySellerCenterIdResponse)(nil), "fulfillment_rules.v1.UpdateSellerBySellerCenterIdResponse")
	proto.RegisterType((*DeleteSellerRequest)(nil), "fulfillment_rules.v1.DeleteSellerRequest")
	proto.RegisterType((*DeleteSellerResponse)(nil), "fulfillment_rules.v1.DeleteSellerResponse")
	proto.RegisterType((*UpdateBizConfigSellerRequest)(nil), "fulfillment_rules.v1.UpdateBizConfigSellerRequest")
	proto.RegisterType((*UpdateBizConfigSellerResponse)(nil), "fulfillment_rules.v1.UpdateBizConfigSellerResponse")
	proto.RegisterType((*GetBizConfigBySellerIdRequest)(nil), "fulfillment_rules.v1.GetBizConfigBySellerIdRequest")
	proto.RegisterType((*GetBizConfigBySellerIdResponse)(nil), "fulfillment_rules.v1.GetBizConfigBySellerIdResponse")
}

func init() {
	proto.RegisterFile("proto/fulfillment_rules/v1/seller_service.proto", fileDescriptor_8a729fcb5609a32b)
}

var fileDescriptor_8a729fcb5609a32b = []byte{
	// 1038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xef, 0x6e, 0x5c, 0x3b, 0x7e, 0x49, 0xda, 0x64, 0xe2, 0x24, 0xcb, 0xd6, 0x71, 0xcd, 0x82,
	0x52, 0x37, 0x48, 0x5e, 0xea, 0x44, 0x28, 0xed, 0xa9, 0x72, 0x90, 0xaa, 0x54, 0x70, 0xd9, 0x8a,
	0x0b, 0x97, 0xd5, 0xb2, 0x3b, 0x09, 0xa3, 0xae, 0x77, 0xb6, 0x33, 0x63, 0x97, 0xb4, 0x20, 0x24,
	0x4e, 0x88, 0x2b, 0x17, 0xae, 0xf9, 0x12, 0x7c, 0x06, 0x04, 0x17, 0x24, 0xbe, 0x00, 0x4a, 0xf9,
	0x14, 0x9c, 0x90, 0x67, 0x77, 0x1d, 0xff, 0x99, 0xb5, 0x1d, 0x2b, 0x47, 0x4e, 0x89, 0x67, 0x7e,
	0xbf, 0xf7, 0x7e, 0xf3, 0xe6, 0xfd, 0xde, 0xd8, 0x60, 0xc7, 0x8c, 0x0a, 0x6a, 0x9f, 0x76, 0xc3,
	0x53, 0x12, 0x86, 0x1d, 0x1c, 0x09, 0x97, 0x75, 0x43, 0xcc, 0xed, 0xde, 0x23, 0x9b, 0xe3, 0x30,
	0xc4, 0xcc, 0xe5, 0x98, 0xf5, 0x88, 0x8f, 0x9b, 0x12, 0x89, 0x2a, 0x13, 0xd0, 0x66, 0xef, 0x91,
	0x59, 0x3d, 0xa3, 0xf4, 0x2c, 0xc4, 0xb6, 0x17, 0x13, 0xdb, 0x8b, 0x22, 0x2a, 0x3c, 0x41, 0x68,
	0xc4, 0x13, 0x8e, 0xb9, 0xd3, 0xf3, 0x42, 0x12, 0x78, 0x02, 0xdb, 0xd9, 0x3f, 0xe9, 0xc6, 0xfb,
	0xca, 0xbc, 0x3e, 0xed, 0x74, 0x68, 0x94, 0x40, 0xac, 0xdf, 0x0b, 0xb0, 0x79, 0xcc, 0xb0, 0x27,
	0xf0, 0x0b, 0x29, 0xc7, 0xc1, 0xaf, 0xba, 0x98, 0x0b, 0x74, 0x00, 0xeb, 0xa9, 0x3e, 0x1f, 0x47,
	0x02, 0x33, 0x97, 0x04, 0x86, 0x56, 0xd7, 0x1a, 0x6b, 0xed, 0xd2, 0xbf, 0xed, 0xc2, 0xbe, 0x5e,
	0xbf, 0xe5, 0x4c, 0x00, 0xd0, 0x3d, 0x28, 0xf8, 0x34, 0xc0, 0x86, 0x5e, 0xd7, 0x1a, 0x65, 0x09,
	0x64, 0xfa, 0xba, 0xe6, 0xc8, 0x45, 0x74, 0x08, 0x5b, 0x84, 0xbb, 0x5e, 0x18, 0xd2, 0xd7, 0xae,
	0xd7, 0x15, 0xd4, 0x8d, 0x19, 0xf5, 0x31, 0xe7, 0xc6, 0x52, 0x5d, 0x6b, 0x2c, 0x3b, 0xea, 0x4d,
	0x74, 0x04, 0x3b, 0x84, 0xbb, 0xa4, 0x13, 0x53, 0x26, 0xdc, 0xd7, 0x44, 0x7c, 0x4d, 0xbb, 0xc2,
	0xe5, 0x82, 0x32, 0x6c, 0x14, 0x24, 0x2f, 0x6f, 0x1b, 0x7d, 0x0e, 0x1b, 0x01, 0x3e, 0xf5, 0xba,
	0xa1, 0x70, 0x49, 0xd4, 0xc3, 0x91, 0xa0, 0xec, 0xdc, 0xb8, 0x5d, 0xd7, 0x1a, 0x2b, 0xad, 0xfb,
	0x4d, 0x55, 0x95, 0x9b, 0x27, 0x19, 0xcc, 0x99, 0x64, 0xa2, 0x06, 0xdc, 0x8d, 0xbd, 0x73, 0x49,
	0xc0, 0x31, 0x27, 0x21, 0x8d, 0x8c, 0x62, 0x5d, 0x6b, 0x14, 0x9c, 0xf1, 0x65, 0xb4, 0x07, 0x77,
	0x08, 0x77, 0xf9, 0x4b, 0x12, 0xbb, 0x3e, 0xed, 0xc6, 0x34, 0x32, 0x4a, 0x52, 0xe9, 0xd8, 0x2a,
	0x7a, 0x0a, 0xf7, 0xd2, 0x33, 0xfb, 0x9e, 0xc0, 0x2e, 0x65, 0x01, 0x66, 0xfd, 0x73, 0x77, 0x68,
	0xff, 0x72, 0x8d, 0x65, 0x49, 0x9a, 0x06, 0x41, 0xcf, 0xa1, 0x3e, 0xbc, 0x1d, 0xd1, 0x68, 0x32,
	0x4c, 0x59, 0x86, 0x99, 0x89, 0x43, 0x6d, 0xa8, 0xf6, 0x31, 0x71, 0x1c, 0x9e, 0xbb, 0x0c, 0x87,
	0x9e, 0x20, 0x3d, 0x9c, 0x51, 0xfa, 0x71, 0x40, 0xc6, 0x99, 0x8a, 0xb1, 0xf6, 0xa0, 0x32, 0xda,
	0x4b, 0x3c, 0xa6, 0x11, 0xc7, 0xe8, 0x0e, 0xe8, 0x59, 0xfb, 0x38, 0x3a, 0x09, 0xac, 0xe7, 0xb0,
	0xf1, 0x19, 0xe1, 0x62, 0xb4, 0xe3, 0x76, 0xe1, 0x76, 0x48, 0x3a, 0x44, 0x8c, 0xb4, 0x99, 0x11,
	0x38, 0xc9, 0x2a, 0xda, 0x86, 0xa2, 0xdf, 0x65, 0x9c, 0xb2, 0xa4, 0xbb, 0x9c, 0xf4, 0x93, 0x15,
	0x01, 0x1a, 0x8e, 0x95, 0x66, 0xac, 0xc3, 0x4a, 0x84, 0xbf, 0x11, 0x6e, 0x4a, 0xd1, 0x24, 0x65,
	0x78, 0x09, 0x7d, 0x02, 0xa5, 0xa4, 0x7f, 0xb9, 0xa1, 0xd7, 0x97, 0x1a, 0x2b, 0xad, 0xaa, 0xba,
	0x29, 0xd2, 0xc0, 0x19, 0xd8, 0xfa, 0x08, 0xd6, 0x9f, 0xe1, 0x31, 0xe9, 0x3b, 0x57, 0xe7, 0xbb,
	0xb2, 0x47, 0xff, 0xa0, 0x27, 0xb0, 0x31, 0x04, 0x4e, 0xb5, 0x1d, 0x42, 0x31, 0x09, 0x26, 0x19,
	0xb3, 0x12, 0xa7, 0x58, 0xeb, 0x5d, 0x01, 0x36, 0xbf, 0x88, 0x83, 0x09, 0xa3, 0xe6, 0xe5, 0x56,
	0x3a, 0x58, 0x9f, 0xd7, 0xc1, 0x4b, 0xd7, 0x72, 0x70, 0x61, 0x41, 0x07, 0xdf, 0x5e, 0xc0, 0xc1,
	0xc5, 0x9b, 0x74, 0x70, 0x69, 0x5e, 0x07, 0x2f, 0x2f, 0xe2, 0xe0, 0xf2, 0xcd, 0x38, 0x18, 0x6e,
	0xc8, 0xc1, 0x2b, 0x73, 0x38, 0xf8, 0x63, 0xa8, 0x8c, 0x36, 0x59, 0xda, 0xb3, 0x06, 0x94, 0x3a,
	0x98, 0x73, 0xef, 0x0c, 0xa7, 0x5e, 0xca, 0x3e, 0x5a, 0xbf, 0xea, 0xf0, 0xc1, 0x30, 0xa5, 0x7d,
	0x9e, 0xfc, 0x3d, 0x96, 0x3d, 0x75, 0x12, 0xfc, 0xff, 0xa0, 0xa8, 0xdb, 0xd1, 0x7a, 0x0a, 0x1f,
	0x4e, 0xaf, 0xdb, 0xcc, 0xd2, 0x37, 0x61, 0xf3, 0x53, 0x1c, 0xe2, 0x79, 0x27, 0x42, 0xff, 0x72,
	0x47, 0xf1, 0x33, 0x33, 0x5c, 0x68, 0x50, 0x4d, 0x44, 0xb6, 0xc9, 0x9b, 0x63, 0x1a, 0x9d, 0x92,
	0xb3, 0x39, 0xa7, 0x4f, 0x0b, 0x2a, 0x99, 0xab, 0x82, 0x2e, 0x93, 0xcd, 0xe5, 0x72, 0xec, 0x27,
	0x13, 0xc8, 0x51, 0xee, 0xf5, 0x2f, 0xd4, 0x8b, 0x63, 0x46, 0x7b, 0x5e, 0x38, 0x4a, 0x5a, 0x92,
	0x24, 0xf5, 0xa6, 0xf5, 0x18, 0x76, 0x73, 0x24, 0xce, 0x3c, 0xde, 0x11, 0xec, 0x3e, 0xc3, 0x62,
	0xc0, 0xcb, 0xae, 0xe0, 0xaa, 0x69, 0x73, 0x4b, 0xf9, 0x93, 0x06, 0xb5, 0x3c, 0x6a, 0x9a, 0x36,
	0xaf, 0x02, 0xda, 0x22, 0x15, 0xd0, 0xa7, 0x54, 0xa0, 0xf5, 0x63, 0x19, 0xd6, 0x92, 0xf4, 0x2f,
	0x92, 0xef, 0x92, 0xe8, 0x0d, 0xac, 0x0e, 0x3f, 0xc4, 0xe8, 0xa1, 0xba, 0x3f, 0x15, 0x5f, 0xfc,
	0xcc, 0xfd, 0x79, 0xa0, 0xc9, 0x11, 0xad, 0xcd, 0x1f, 0xfe, 0xfa, 0xe7, 0x67, 0x7d, 0xcd, 0x5a,
	0x4e, 0xbf, 0xcb, 0xf2, 0x27, 0xda, 0x3e, 0x7a, 0x05, 0x70, 0xf5, 0x20, 0xa3, 0x07, 0xea, 0x70,
	0x13, 0xcf, 0xbf, 0xd9, 0x98, 0x0d, 0x4c, 0xb3, 0xae, 0xcb, 0xac, 0x80, 0x06, 0x59, 0x11, 0x87,
	0xf2, 0xe0, 0x99, 0x45, 0x7b, 0xea, 0x40, 0xe3, 0x8f, 0xb6, 0xf9, 0x60, 0x26, 0x2e, 0xcd, 0xb7,
	0x25, 0xf3, 0xdd, 0x45, 0x6b, 0x59, 0x3e, 0xfb, 0x2d, 0x09, 0xbe, 0x43, 0xdf, 0xc3, 0xea, 0xb0,
	0x7f, 0xf3, 0x6a, 0xac, 0x78, 0xb3, 0xf3, 0x6a, 0xac, 0x9a, 0xbc, 0x96, 0x21, 0xb3, 0x23, 0x73,
	0x34, 0x7b, 0xbf, 0xd0, 0x7f, 0x0c, 0xcc, 0xa9, 0x9e, 0x20, 0xe8, 0xf1, 0xec, 0x34, 0x39, 0xd3,
	0xda, 0x7c, 0xb2, 0x08, 0x35, 0x55, 0x7c, 0x28, 0x15, 0x37, 0xcd, 0x87, 0x03, 0xc5, 0x23, 0x73,
	0xdd, 0x7e, 0x3b, 0x3e, 0xe6, 0xe5, 0x69, 0xbe, 0x85, 0xd5, 0xe1, 0xe1, 0x94, 0x57, 0x4e, 0xc5,
	0xc0, 0xcb, 0x2b, 0xa7, 0x6a, 0xd6, 0x65, 0x97, 0xb9, 0x3f, 0x76, 0x99, 0x17, 0x1a, 0x6c, 0x29,
	0xa7, 0x08, 0x6a, 0x4d, 0xab, 0x84, 0x7a, 0x2a, 0x9a, 0x07, 0xd7, 0xe2, 0xa4, 0xca, 0xee, 0x4b,
	0x65, 0xef, 0xb5, 0x2a, 0x23, 0xca, 0x6c, 0x5f, 0x62, 0xfb, 0x15, 0xba, 0xd0, 0x60, 0x5b, 0x3d,
	0x73, 0xd0, 0x41, 0x6e, 0x2f, 0xe7, 0x0f, 0x37, 0xf3, 0xf0, 0x7a, 0xa4, 0x54, 0x66, 0x55, 0xca,
	0xdc, 0x46, 0x4a, 0x99, 0xed, 0xa3, 0xdf, 0x2e, 0x6b, 0xda, 0x9f, 0x97, 0x35, 0xed, 0xef, 0xcb,
	0x9a, 0xf6, 0xcb, 0xbb, 0xda, 0xad, 0x2f, 0xf7, 0x58, 0xec, 0x37, 0x05, 0x7e, 0x49, 0xbd, 0x98,
	0xf0, 0xa6, 0x4f, 0x3b, 0x36, 0x8b, 0xfd, 0xc9, 0x1f, 0xc4, 0x5f, 0x15, 0xe5, 0xef, 0xd1, 0x83,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x17, 0xfc, 0x6d, 0xba, 0x32, 0x0f, 0x00, 0x00,
}

func (m *CreateSellerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSellerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSellerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsApplyRelativeAllocation {
		i--
		if m.IsApplyRelativeAllocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsAllocateNoneOrderPromotion {
		i--
		if m.IsAllocateNoneOrderPromotion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsAllocateOrderPromotion {
		i--
		if m.IsAllocateOrderPromotion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.IsSkipCoupon {
		i--
		if m.IsSkipCoupon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.PaymentEpsilon != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.PaymentEpsilon))
		i--
		dAtA[i] = 0x30
	}
	if m.DefaultInventory != nil {
		{
			size, err := m.DefaultInventory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSellerService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IsImportWithoutStore {
		i--
		if m.IsImportWithoutStore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsAllowAutoProcess {
		i--
		if m.IsAllowAutoProcess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintSellerService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.SellerCenterId != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.SellerCenterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSellerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSellerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSellerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cursor) > 0 {
		i -= len(m.Cursor)
		copy(dAtA[i:], m.Cursor)
		i = encodeVarintSellerService(dAtA, i, uint64(len(m.Cursor)))
		i--
		dAtA[i] = 0x12
	}
	if m.Limit != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sellers) > 0 {
		for iNdEx := len(m.Sellers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sellers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSellerService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NextCursor) > 0 {
		i -= len(m.NextCursor)
		copy(dAtA[i:], m.NextCursor)
		i = encodeVarintSellerService(dAtA, i, uint64(len(m.NextCursor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSellerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSellerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSellerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Seller != nil {
		{
			size, err := m.Seller.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSellerService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSellerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSellerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSellerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsApplyRelativeAllocation {
		i--
		if m.IsApplyRelativeAllocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IsAllocateNoneOrderPromotion {
		i--
		if m.IsAllocateNoneOrderPromotion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsAllocateOrderPromotion {
		i--
		if m.IsAllocateOrderPromotion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsSkipCoupon {
		i--
		if m.IsSkipCoupon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.PaymentEpsilon != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.PaymentEpsilon))
		i--
		dAtA[i] = 0x38
	}
	if m.DefaultInventory != nil {
		{
			size, err := m.DefaultInventory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSellerService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.IsImportWithoutStore {
		i--
		if m.IsImportWithoutStore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsAllowAutoProcess {
		i--
		if m.IsAllowAutoProcess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintSellerService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SellerCenterId != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.SellerCenterId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSellerService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSellerBySellerCenterIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSellerBySellerCenterIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSellerBySellerCenterIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DefaultInventory != nil {
		{
			size, err := m.DefaultInventory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSellerService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IsImportWithoutStore {
		i--
		if m.IsImportWithoutStore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsAllowAutoProcess {
		i--
		if m.IsAllowAutoProcess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintSellerService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.SellerCenterId != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.SellerCenterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSellerBySellerCenterIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSellerBySellerCenterIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSellerBySellerCenterIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSellerService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSellerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSellerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSellerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSellerService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBizConfigSellerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBizConfigSellerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBizConfigSellerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApprovalDurationSec != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.ApprovalDurationSec))
		i--
		dAtA[i] = 0x18
	}
	if m.PaymentDurationSec != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.PaymentDurationSec))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBizConfigSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBizConfigSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBizConfigSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSellerService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBizConfigBySellerIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBizConfigBySellerIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBizConfigBySellerIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBizConfigBySellerIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBizConfigBySellerIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBizConfigBySellerIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApprovalDurationSec != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.ApprovalDurationSec))
		i--
		dAtA[i] = 0x10
	}
	if m.PaymentDurationSec != 0 {
		i = encodeVarintSellerService(dAtA, i, uint64(m.PaymentDurationSec))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSellerService(dAtA []byte, offset int, v uint64) int {
	offset -= sovSellerService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateSellerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellerCenterId != 0 {
		n += 1 + sovSellerService(uint64(m.SellerCenterId))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.IsAllowAutoProcess {
		n += 2
	}
	if m.IsImportWithoutStore {
		n += 2
	}
	if m.DefaultInventory != nil {
		l = m.DefaultInventory.Size()
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.PaymentEpsilon != 0 {
		n += 1 + sovSellerService(uint64(m.PaymentEpsilon))
	}
	if m.IsSkipCoupon {
		n += 2
	}
	if m.IsAllocateOrderPromotion {
		n += 2
	}
	if m.IsAllocateNoneOrderPromotion {
		n += 2
	}
	if m.IsApplyRelativeAllocation {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSellerService(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSellerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovSellerService(uint64(m.Limit))
	}
	l = len(m.Cursor)
	if l > 0 {
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NextCursor)
	if l > 0 {
		n += 1 + l + sovSellerService(uint64(l))
	}
	if len(m.Sellers) > 0 {
		for _, e := range m.Sellers {
			l = e.Size()
			n += 1 + l + sovSellerService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSellerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSellerService(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seller != nil {
		l = m.Seller.Size()
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSellerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSellerService(uint64(m.Id))
	}
	if m.SellerCenterId != 0 {
		n += 1 + sovSellerService(uint64(m.SellerCenterId))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.IsAllowAutoProcess {
		n += 2
	}
	if m.IsImportWithoutStore {
		n += 2
	}
	if m.DefaultInventory != nil {
		l = m.DefaultInventory.Size()
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.PaymentEpsilon != 0 {
		n += 1 + sovSellerService(uint64(m.PaymentEpsilon))
	}
	if m.IsSkipCoupon {
		n += 2
	}
	if m.IsAllocateOrderPromotion {
		n += 2
	}
	if m.IsAllocateNoneOrderPromotion {
		n += 2
	}
	if m.IsApplyRelativeAllocation {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSellerBySellerCenterIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellerCenterId != 0 {
		n += 1 + sovSellerService(uint64(m.SellerCenterId))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.IsAllowAutoProcess {
		n += 2
	}
	if m.IsImportWithoutStore {
		n += 2
	}
	if m.DefaultInventory != nil {
		l = m.DefaultInventory.Size()
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSellerBySellerCenterIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteSellerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSellerService(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBizConfigSellerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSellerService(uint64(m.Id))
	}
	if m.PaymentDurationSec != 0 {
		n += 1 + sovSellerService(uint64(m.PaymentDurationSec))
	}
	if m.ApprovalDurationSec != 0 {
		n += 1 + sovSellerService(uint64(m.ApprovalDurationSec))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBizConfigSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSellerService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBizConfigBySellerIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSellerService(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBizConfigBySellerIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaymentDurationSec != 0 {
		n += 1 + sovSellerService(uint64(m.PaymentDurationSec))
	}
	if m.ApprovalDurationSec != 0 {
		n += 1 + sovSellerService(uint64(m.ApprovalDurationSec))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSellerService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSellerService(x uint64) (n int) {
	return sovSellerService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateSellerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSellerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSellerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCenterId", wireType)
			}
			m.SellerCenterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerCenterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllowAutoProcess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllowAutoProcess = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsImportWithoutStore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsImportWithoutStore = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultInventory == nil {
				m.DefaultInventory = &Inventory{}
			}
			if err := m.DefaultInventory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentEpsilon", wireType)
			}
			m.PaymentEpsilon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentEpsilon |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSkipCoupon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSkipCoupon = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllocateOrderPromotion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllocateOrderPromotion = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllocateNoneOrderPromotion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllocateNoneOrderPromotion = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApplyRelativeAllocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApplyRelativeAllocation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSellerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSellerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSellerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextCursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sellers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sellers = append(m.Sellers, &Seller{})
			if err := m.Sellers[len(m.Sellers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSellerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSellerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSellerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Seller == nil {
				m.Seller = &Seller{}
			}
			if err := m.Seller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSellerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSellerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSellerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCenterId", wireType)
			}
			m.SellerCenterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerCenterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllowAutoProcess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllowAutoProcess = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsImportWithoutStore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsImportWithoutStore = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultInventory == nil {
				m.DefaultInventory = &Inventory{}
			}
			if err := m.DefaultInventory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentEpsilon", wireType)
			}
			m.PaymentEpsilon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentEpsilon |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSkipCoupon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSkipCoupon = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllocateOrderPromotion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllocateOrderPromotion = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllocateNoneOrderPromotion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllocateNoneOrderPromotion = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApplyRelativeAllocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApplyRelativeAllocation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSellerBySellerCenterIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSellerBySellerCenterIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSellerBySellerCenterIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCenterId", wireType)
			}
			m.SellerCenterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerCenterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllowAutoProcess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllowAutoProcess = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsImportWithoutStore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsImportWithoutStore = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultInventory == nil {
				m.DefaultInventory = &Inventory{}
			}
			if err := m.DefaultInventory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSellerBySellerCenterIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSellerBySellerCenterIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSellerBySellerCenterIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSellerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSellerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSellerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBizConfigSellerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBizConfigSellerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBizConfigSellerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDurationSec", wireType)
			}
			m.PaymentDurationSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentDurationSec |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalDurationSec", wireType)
			}
			m.ApprovalDurationSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApprovalDurationSec |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBizConfigSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBizConfigSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBizConfigSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBizConfigBySellerIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBizConfigBySellerIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBizConfigBySellerIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBizConfigBySellerIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBizConfigBySellerIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBizConfigBySellerIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDurationSec", wireType)
			}
			m.PaymentDurationSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentDurationSec |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalDurationSec", wireType)
			}
			m.ApprovalDurationSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApprovalDurationSec |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSellerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSellerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSellerService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSellerService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSellerService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSellerService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSellerService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSellerService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSellerService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSellerService = fmt.Errorf("proto: unexpected end of group")
)
