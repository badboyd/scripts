// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fulfillment_rules

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SellerServiceClient is the client API for SellerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellerServiceClient interface {
	// CreateSeller register new seller in system
	CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error)
	// ListSeller retrive all sellers in system
	ListSeller(ctx context.Context, in *ListSellerRequest, opts ...grpc.CallOption) (*ListSellerResponse, error)
	// GetSeller retrive a seller's info
	GetSeller(ctx context.Context, in *GetSellerRequest, opts ...grpc.CallOption) (*GetSellerResponse, error)
	// UpdateSeller modify info of a seller
	UpdateSeller(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*UpdateSellerResponse, error)
	// UpdateSellerBySellerCenterId modify info of seller by seller_center_id attribute
	UpdateSellerBySellerCenterId(ctx context.Context, in *UpdateSellerBySellerCenterIdRequest, opts ...grpc.CallOption) (*UpdateSellerBySellerCenterIdResponse, error)
	// DeleteSeller remove a seller
	DeleteSeller(ctx context.Context, in *DeleteSellerRequest, opts ...grpc.CallOption) (*DeleteSellerResponse, error)
	// UpdateBizConfigSeller seller modify value config of their own
	UpdateBizConfigSeller(ctx context.Context, in *UpdateBizConfigSellerRequest, opts ...grpc.CallOption) (*UpdateBizConfigSellerResponse, error)
	// GetBizConfigBySellerId retrive config of seller by id
	GetBizConfigBySellerId(ctx context.Context, in *GetBizConfigBySellerIdRequest, opts ...grpc.CallOption) (*GetBizConfigBySellerIdResponse, error)
}

type sellerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSellerServiceClient(cc grpc.ClientConnInterface) SellerServiceClient {
	return &sellerServiceClient{cc}
}

func (c *sellerServiceClient) CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error) {
	out := new(CreateSellerResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.SellerService/CreateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) ListSeller(ctx context.Context, in *ListSellerRequest, opts ...grpc.CallOption) (*ListSellerResponse, error) {
	out := new(ListSellerResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.SellerService/ListSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetSeller(ctx context.Context, in *GetSellerRequest, opts ...grpc.CallOption) (*GetSellerResponse, error) {
	out := new(GetSellerResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.SellerService/GetSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) UpdateSeller(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*UpdateSellerResponse, error) {
	out := new(UpdateSellerResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.SellerService/UpdateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) UpdateSellerBySellerCenterId(ctx context.Context, in *UpdateSellerBySellerCenterIdRequest, opts ...grpc.CallOption) (*UpdateSellerBySellerCenterIdResponse, error) {
	out := new(UpdateSellerBySellerCenterIdResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.SellerService/UpdateSellerBySellerCenterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) DeleteSeller(ctx context.Context, in *DeleteSellerRequest, opts ...grpc.CallOption) (*DeleteSellerResponse, error) {
	out := new(DeleteSellerResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.SellerService/DeleteSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) UpdateBizConfigSeller(ctx context.Context, in *UpdateBizConfigSellerRequest, opts ...grpc.CallOption) (*UpdateBizConfigSellerResponse, error) {
	out := new(UpdateBizConfigSellerResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.SellerService/UpdateBizConfigSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetBizConfigBySellerId(ctx context.Context, in *GetBizConfigBySellerIdRequest, opts ...grpc.CallOption) (*GetBizConfigBySellerIdResponse, error) {
	out := new(GetBizConfigBySellerIdResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.SellerService/GetBizConfigBySellerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellerServiceServer is the server API for SellerService service.
// All implementations must embed UnimplementedSellerServiceServer
// for forward compatibility
type SellerServiceServer interface {
	// CreateSeller register new seller in system
	CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error)
	// ListSeller retrive all sellers in system
	ListSeller(context.Context, *ListSellerRequest) (*ListSellerResponse, error)
	// GetSeller retrive a seller's info
	GetSeller(context.Context, *GetSellerRequest) (*GetSellerResponse, error)
	// UpdateSeller modify info of a seller
	UpdateSeller(context.Context, *UpdateSellerRequest) (*UpdateSellerResponse, error)
	// UpdateSellerBySellerCenterId modify info of seller by seller_center_id attribute
	UpdateSellerBySellerCenterId(context.Context, *UpdateSellerBySellerCenterIdRequest) (*UpdateSellerBySellerCenterIdResponse, error)
	// DeleteSeller remove a seller
	DeleteSeller(context.Context, *DeleteSellerRequest) (*DeleteSellerResponse, error)
	// UpdateBizConfigSeller seller modify value config of their own
	UpdateBizConfigSeller(context.Context, *UpdateBizConfigSellerRequest) (*UpdateBizConfigSellerResponse, error)
	// GetBizConfigBySellerId retrive config of seller by id
	GetBizConfigBySellerId(context.Context, *GetBizConfigBySellerIdRequest) (*GetBizConfigBySellerIdResponse, error)
	mustEmbedUnimplementedSellerServiceServer()
}

// UnimplementedSellerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSellerServiceServer struct {
}

func (*UnimplementedSellerServiceServer) CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeller not implemented")
}
func (*UnimplementedSellerServiceServer) ListSeller(context.Context, *ListSellerRequest) (*ListSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeller not implemented")
}
func (*UnimplementedSellerServiceServer) GetSeller(context.Context, *GetSellerRequest) (*GetSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeller not implemented")
}
func (*UnimplementedSellerServiceServer) UpdateSeller(context.Context, *UpdateSellerRequest) (*UpdateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeller not implemented")
}
func (*UnimplementedSellerServiceServer) UpdateSellerBySellerCenterId(context.Context, *UpdateSellerBySellerCenterIdRequest) (*UpdateSellerBySellerCenterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerBySellerCenterId not implemented")
}
func (*UnimplementedSellerServiceServer) DeleteSeller(context.Context, *DeleteSellerRequest) (*DeleteSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeller not implemented")
}
func (*UnimplementedSellerServiceServer) UpdateBizConfigSeller(context.Context, *UpdateBizConfigSellerRequest) (*UpdateBizConfigSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBizConfigSeller not implemented")
}
func (*UnimplementedSellerServiceServer) GetBizConfigBySellerId(context.Context, *GetBizConfigBySellerIdRequest) (*GetBizConfigBySellerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBizConfigBySellerId not implemented")
}
func (*UnimplementedSellerServiceServer) mustEmbedUnimplementedSellerServiceServer() {}

func RegisterSellerServiceServer(s *grpc.Server, srv SellerServiceServer) {
	s.RegisterService(&_SellerService_serviceDesc, srv)
}

func _SellerService_CreateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).CreateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.SellerService/CreateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).CreateSeller(ctx, req.(*CreateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_ListSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).ListSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.SellerService/ListSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).ListSeller(ctx, req.(*ListSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.SellerService/GetSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetSeller(ctx, req.(*GetSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_UpdateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).UpdateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.SellerService/UpdateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).UpdateSeller(ctx, req.(*UpdateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_UpdateSellerBySellerCenterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerBySellerCenterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).UpdateSellerBySellerCenterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.SellerService/UpdateSellerBySellerCenterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).UpdateSellerBySellerCenterId(ctx, req.(*UpdateSellerBySellerCenterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_DeleteSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).DeleteSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.SellerService/DeleteSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).DeleteSeller(ctx, req.(*DeleteSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_UpdateBizConfigSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBizConfigSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).UpdateBizConfigSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.SellerService/UpdateBizConfigSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).UpdateBizConfigSeller(ctx, req.(*UpdateBizConfigSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetBizConfigBySellerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBizConfigBySellerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetBizConfigBySellerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.SellerService/GetBizConfigBySellerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetBizConfigBySellerId(ctx, req.(*GetBizConfigBySellerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SellerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fulfillment_rules.v1.SellerService",
	HandlerType: (*SellerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeller",
			Handler:    _SellerService_CreateSeller_Handler,
		},
		{
			MethodName: "ListSeller",
			Handler:    _SellerService_ListSeller_Handler,
		},
		{
			MethodName: "GetSeller",
			Handler:    _SellerService_GetSeller_Handler,
		},
		{
			MethodName: "UpdateSeller",
			Handler:    _SellerService_UpdateSeller_Handler,
		},
		{
			MethodName: "UpdateSellerBySellerCenterId",
			Handler:    _SellerService_UpdateSellerBySellerCenterId_Handler,
		},
		{
			MethodName: "DeleteSeller",
			Handler:    _SellerService_DeleteSeller_Handler,
		},
		{
			MethodName: "UpdateBizConfigSeller",
			Handler:    _SellerService_UpdateBizConfigSeller_Handler,
		},
		{
			MethodName: "GetBizConfigBySellerId",
			Handler:    _SellerService_GetBizConfigBySellerId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fulfillment_rules/v1/seller_service.proto",
}
