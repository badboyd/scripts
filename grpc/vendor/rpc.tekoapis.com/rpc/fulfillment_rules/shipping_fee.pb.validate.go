// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/fulfillment_rules/v1/shipping_fee.proto

package fulfillment_rules

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _shipping_fee_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CalculateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CalculateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		return CalculateRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetSellerId() <= 0 {
		return CalculateRequestValidationError{
			field:  "SellerId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Province

	// no validation rules for OrderValue

	// no validation rules for Weight

	return nil
}

// CalculateRequestValidationError is the validation error returned by
// CalculateRequest.Validate if the designated constraints aren't met.
type CalculateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateRequestValidationError) ErrorName() string { return "CalculateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CalculateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateRequestValidationError{}

// Validate checks the field values on CalculateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CalculateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Fee

	// no validation rules for RuleId

	return nil
}

// CalculateResponseValidationError is the validation error returned by
// CalculateResponse.Validate if the designated constraints aren't met.
type CalculateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateResponseValidationError) ErrorName() string {
	return "CalculateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateResponseValidationError{}

// Validate checks the field values on AddRuleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddRuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SellerId

	// no validation rules for Rule

	// no validation rules for Fee

	if m.GetPriority() >= 255 {
		return AddRuleRequestValidationError{
			field:  "Priority",
			reason: "value must be less than 255",
		}
	}

	// no validation rules for Comment

	return nil
}

// AddRuleRequestValidationError is the validation error returned by
// AddRuleRequest.Validate if the designated constraints aren't met.
type AddRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRuleRequestValidationError) ErrorName() string { return "AddRuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRuleRequestValidationError{}

// Validate checks the field values on AddRuleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddRuleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RuleId

	return nil
}

// AddRuleResponseValidationError is the validation error returned by
// AddRuleResponse.Validate if the designated constraints aren't met.
type AddRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRuleResponseValidationError) ErrorName() string { return "AddRuleResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRuleResponseValidationError{}

// Validate checks the field values on ListRulesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRulesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSellerId() <= 0 {
		return ListRulesRequestValidationError{
			field:  "SellerId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetLimit() > 100 {
		return ListRulesRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 100",
		}
	}

	// no validation rules for Cursor

	return nil
}

// ListRulesRequestValidationError is the validation error returned by
// ListRulesRequest.Validate if the designated constraints aren't met.
type ListRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesRequestValidationError) ErrorName() string { return "ListRulesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesRequestValidationError{}

// Validate checks the field values on ListRulesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRulesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NextCursor

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRulesResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRulesResponseValidationError is the validation error returned by
// ListRulesResponse.Validate if the designated constraints aren't met.
type ListRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesResponseValidationError) ErrorName() string {
	return "ListRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesResponseValidationError{}

// Validate checks the field values on DisableRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DisableRuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DisableRuleRequestValidationError is the validation error returned by
// DisableRuleRequest.Validate if the designated constraints aren't met.
type DisableRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableRuleRequestValidationError) ErrorName() string {
	return "DisableRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableRuleRequestValidationError{}

// Validate checks the field values on DisableRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DisableRuleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// DisableRuleResponseValidationError is the validation error returned by
// DisableRuleResponse.Validate if the designated constraints aren't met.
type DisableRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableRuleResponseValidationError) ErrorName() string {
	return "DisableRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableRuleResponseValidationError{}
