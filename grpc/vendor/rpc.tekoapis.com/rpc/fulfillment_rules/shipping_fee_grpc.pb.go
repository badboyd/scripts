// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fulfillment_rules

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ShippingFeeServiceClient is the client API for ShippingFeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingFeeServiceClient interface {
	// Calculate the shipping fee
	Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error)
	// AddRule register new shipping fee rule
	AddRule(ctx context.Context, in *AddRuleRequest, opts ...grpc.CallOption) (*AddRuleResponse, error)
	// ListRules list by seller with pagination
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	// DisableRule mark a rule is inactive
	DisableRule(ctx context.Context, in *DisableRuleRequest, opts ...grpc.CallOption) (*DisableRuleResponse, error)
}

type shippingFeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingFeeServiceClient(cc grpc.ClientConnInterface) ShippingFeeServiceClient {
	return &shippingFeeServiceClient{cc}
}

func (c *shippingFeeServiceClient) Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error) {
	out := new(CalculateResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.ShippingFeeService/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingFeeServiceClient) AddRule(ctx context.Context, in *AddRuleRequest, opts ...grpc.CallOption) (*AddRuleResponse, error) {
	out := new(AddRuleResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.ShippingFeeService/AddRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingFeeServiceClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.ShippingFeeService/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingFeeServiceClient) DisableRule(ctx context.Context, in *DisableRuleRequest, opts ...grpc.CallOption) (*DisableRuleResponse, error) {
	out := new(DisableRuleResponse)
	err := c.cc.Invoke(ctx, "/fulfillment_rules.v1.ShippingFeeService/DisableRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingFeeServiceServer is the server API for ShippingFeeService service.
// All implementations must embed UnimplementedShippingFeeServiceServer
// for forward compatibility
type ShippingFeeServiceServer interface {
	// Calculate the shipping fee
	Calculate(context.Context, *CalculateRequest) (*CalculateResponse, error)
	// AddRule register new shipping fee rule
	AddRule(context.Context, *AddRuleRequest) (*AddRuleResponse, error)
	// ListRules list by seller with pagination
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	// DisableRule mark a rule is inactive
	DisableRule(context.Context, *DisableRuleRequest) (*DisableRuleResponse, error)
	mustEmbedUnimplementedShippingFeeServiceServer()
}

// UnimplementedShippingFeeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShippingFeeServiceServer struct {
}

func (*UnimplementedShippingFeeServiceServer) Calculate(context.Context, *CalculateRequest) (*CalculateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (*UnimplementedShippingFeeServiceServer) AddRule(context.Context, *AddRuleRequest) (*AddRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRule not implemented")
}
func (*UnimplementedShippingFeeServiceServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (*UnimplementedShippingFeeServiceServer) DisableRule(context.Context, *DisableRuleRequest) (*DisableRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRule not implemented")
}
func (*UnimplementedShippingFeeServiceServer) mustEmbedUnimplementedShippingFeeServiceServer() {}

func RegisterShippingFeeServiceServer(s *grpc.Server, srv ShippingFeeServiceServer) {
	s.RegisterService(&_ShippingFeeService_serviceDesc, srv)
}

func _ShippingFeeService_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingFeeServiceServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.ShippingFeeService/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingFeeServiceServer).Calculate(ctx, req.(*CalculateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingFeeService_AddRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingFeeServiceServer).AddRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.ShippingFeeService/AddRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingFeeServiceServer).AddRule(ctx, req.(*AddRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingFeeService_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingFeeServiceServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.ShippingFeeService/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingFeeServiceServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingFeeService_DisableRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingFeeServiceServer).DisableRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulfillment_rules.v1.ShippingFeeService/DisableRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingFeeServiceServer).DisableRule(ctx, req.(*DisableRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShippingFeeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fulfillment_rules.v1.ShippingFeeService",
	HandlerType: (*ShippingFeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _ShippingFeeService_Calculate_Handler,
		},
		{
			MethodName: "AddRule",
			Handler:    _ShippingFeeService_AddRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _ShippingFeeService_ListRules_Handler,
		},
		{
			MethodName: "DisableRule",
			Handler:    _ShippingFeeService_DisableRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fulfillment_rules/v1/shipping_fee.proto",
}
