// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListSomethingServiceClient is the client API for ListSomethingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListSomethingServiceClient interface {
	ListSomething(ctx context.Context, in *ListSomethingRequest, opts ...grpc.CallOption) (*ListSomethingResponse, error)
}

type listSomethingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListSomethingServiceClient(cc grpc.ClientConnInterface) ListSomethingServiceClient {
	return &listSomethingServiceClient{cc}
}

func (c *listSomethingServiceClient) ListSomething(ctx context.Context, in *ListSomethingRequest, opts ...grpc.CallOption) (*ListSomethingResponse, error) {
	out := new(ListSomethingResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.proto.v1.ListSomethingService/ListSomething", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListSomethingServiceServer is the server API for ListSomethingService service.
// All implementations should embed UnimplementedListSomethingServiceServer
// for forward compatibility
type ListSomethingServiceServer interface {
	ListSomething(context.Context, *ListSomethingRequest) (*ListSomethingResponse, error)
}

// UnimplementedListSomethingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedListSomethingServiceServer struct {
}

func (UnimplementedListSomethingServiceServer) ListSomething(context.Context, *ListSomethingRequest) (*ListSomethingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSomething not implemented")
}

// UnsafeListSomethingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListSomethingServiceServer will
// result in compilation errors.
type UnsafeListSomethingServiceServer interface {
	mustEmbedUnimplementedListSomethingServiceServer()
}

func RegisterListSomethingServiceServer(s grpc.ServiceRegistrar, srv ListSomethingServiceServer) {
	s.RegisterService(&ListSomethingService_ServiceDesc, srv)
}

func _ListSomethingService_ListSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSomethingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListSomethingServiceServer).ListSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.proto.v1.ListSomethingService/ListSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListSomethingServiceServer).ListSomething(ctx, req.(*ListSomethingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListSomethingService_ServiceDesc is the grpc.ServiceDesc for ListSomethingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListSomethingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcserver.proto.v1.ListSomethingService",
	HandlerType: (*ListSomethingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSomething",
			Handler:    _ListSomethingService_ListSomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}
