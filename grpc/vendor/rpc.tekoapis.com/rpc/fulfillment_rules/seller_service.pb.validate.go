// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/fulfillment_rules/v1/seller_service.proto

package fulfillment_rules

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _seller_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateSellerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSellerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSellerCenterId() <= 0 {
		return CreateSellerRequestValidationError{
			field:  "SellerCenterId",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		return CreateSellerRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for IsAllowAutoProcess

	// no validation rules for IsImportWithoutStore

	if v, ok := interface{}(m.GetDefaultInventory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSellerRequestValidationError{
				field:  "DefaultInventory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentEpsilon

	// no validation rules for IsSkipCoupon

	// no validation rules for IsAllocateOrderPromotion

	// no validation rules for IsAllocateNoneOrderPromotion

	// no validation rules for IsApplyRelativeAllocation

	return nil
}

// CreateSellerRequestValidationError is the validation error returned by
// CreateSellerRequest.Validate if the designated constraints aren't met.
type CreateSellerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSellerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSellerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSellerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSellerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSellerRequestValidationError) ErrorName() string {
	return "CreateSellerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSellerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSellerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSellerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSellerRequestValidationError{}

// Validate checks the field values on CreateSellerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSellerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateSellerResponseValidationError is the validation error returned by
// CreateSellerResponse.Validate if the designated constraints aren't met.
type CreateSellerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSellerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSellerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSellerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSellerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSellerResponseValidationError) ErrorName() string {
	return "CreateSellerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSellerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSellerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSellerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSellerResponseValidationError{}

// Validate checks the field values on ListSellerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListSellerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() > 100 {
		return ListSellerRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 100",
		}
	}

	// no validation rules for Cursor

	return nil
}

// ListSellerRequestValidationError is the validation error returned by
// ListSellerRequest.Validate if the designated constraints aren't met.
type ListSellerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSellerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSellerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSellerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSellerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSellerRequestValidationError) ErrorName() string {
	return "ListSellerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSellerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSellerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSellerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSellerRequestValidationError{}

// Validate checks the field values on ListSellerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSellerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NextCursor

	for idx, item := range m.GetSellers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSellerResponseValidationError{
					field:  fmt.Sprintf("Sellers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSellerResponseValidationError is the validation error returned by
// ListSellerResponse.Validate if the designated constraints aren't met.
type ListSellerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSellerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSellerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSellerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSellerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSellerResponseValidationError) ErrorName() string {
	return "ListSellerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSellerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSellerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSellerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSellerResponseValidationError{}

// Validate checks the field values on GetSellerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetSellerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return GetSellerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetSellerRequestValidationError is the validation error returned by
// GetSellerRequest.Validate if the designated constraints aren't met.
type GetSellerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellerRequestValidationError) ErrorName() string { return "GetSellerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSellerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellerRequestValidationError{}

// Validate checks the field values on GetSellerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetSellerResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSeller()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSellerResponseValidationError{
				field:  "Seller",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSellerResponseValidationError is the validation error returned by
// GetSellerResponse.Validate if the designated constraints aren't met.
type GetSellerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellerResponseValidationError) ErrorName() string {
	return "GetSellerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSellerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellerResponseValidationError{}

// Validate checks the field values on UpdateSellerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSellerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateSellerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetSellerCenterId() <= 0 {
		return UpdateSellerRequestValidationError{
			field:  "SellerCenterId",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		return UpdateSellerRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for IsAllowAutoProcess

	// no validation rules for IsImportWithoutStore

	if v, ok := interface{}(m.GetDefaultInventory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSellerRequestValidationError{
				field:  "DefaultInventory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentEpsilon

	// no validation rules for IsSkipCoupon

	// no validation rules for IsAllocateOrderPromotion

	// no validation rules for IsAllocateNoneOrderPromotion

	// no validation rules for IsApplyRelativeAllocation

	return nil
}

// UpdateSellerRequestValidationError is the validation error returned by
// UpdateSellerRequest.Validate if the designated constraints aren't met.
type UpdateSellerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSellerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSellerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSellerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSellerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSellerRequestValidationError) ErrorName() string {
	return "UpdateSellerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSellerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSellerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSellerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSellerRequestValidationError{}

// Validate checks the field values on UpdateSellerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSellerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// UpdateSellerResponseValidationError is the validation error returned by
// UpdateSellerResponse.Validate if the designated constraints aren't met.
type UpdateSellerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSellerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSellerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSellerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSellerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSellerResponseValidationError) ErrorName() string {
	return "UpdateSellerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSellerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSellerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSellerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSellerResponseValidationError{}

// Validate checks the field values on UpdateSellerBySellerCenterIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateSellerBySellerCenterIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSellerCenterId() <= 0 {
		return UpdateSellerBySellerCenterIdRequestValidationError{
			field:  "SellerCenterId",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		return UpdateSellerBySellerCenterIdRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for IsAllowAutoProcess

	// no validation rules for IsImportWithoutStore

	if v, ok := interface{}(m.GetDefaultInventory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSellerBySellerCenterIdRequestValidationError{
				field:  "DefaultInventory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSellerBySellerCenterIdRequestValidationError is the validation error
// returned by UpdateSellerBySellerCenterIdRequest.Validate if the designated
// constraints aren't met.
type UpdateSellerBySellerCenterIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSellerBySellerCenterIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSellerBySellerCenterIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSellerBySellerCenterIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSellerBySellerCenterIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSellerBySellerCenterIdRequestValidationError) ErrorName() string {
	return "UpdateSellerBySellerCenterIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSellerBySellerCenterIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSellerBySellerCenterIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSellerBySellerCenterIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSellerBySellerCenterIdRequestValidationError{}

// Validate checks the field values on UpdateSellerBySellerCenterIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateSellerBySellerCenterIdResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// UpdateSellerBySellerCenterIdResponseValidationError is the validation error
// returned by UpdateSellerBySellerCenterIdResponse.Validate if the designated
// constraints aren't met.
type UpdateSellerBySellerCenterIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSellerBySellerCenterIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSellerBySellerCenterIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSellerBySellerCenterIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSellerBySellerCenterIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSellerBySellerCenterIdResponseValidationError) ErrorName() string {
	return "UpdateSellerBySellerCenterIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSellerBySellerCenterIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSellerBySellerCenterIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSellerBySellerCenterIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSellerBySellerCenterIdResponseValidationError{}

// Validate checks the field values on DeleteSellerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSellerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return DeleteSellerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DeleteSellerRequestValidationError is the validation error returned by
// DeleteSellerRequest.Validate if the designated constraints aren't met.
type DeleteSellerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSellerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSellerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSellerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSellerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSellerRequestValidationError) ErrorName() string {
	return "DeleteSellerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSellerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSellerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSellerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSellerRequestValidationError{}

// Validate checks the field values on DeleteSellerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSellerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// DeleteSellerResponseValidationError is the validation error returned by
// DeleteSellerResponse.Validate if the designated constraints aren't met.
type DeleteSellerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSellerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSellerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSellerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSellerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSellerResponseValidationError) ErrorName() string {
	return "DeleteSellerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSellerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSellerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSellerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSellerResponseValidationError{}

// Validate checks the field values on UpdateBizConfigSellerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateBizConfigSellerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateBizConfigSellerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for PaymentDurationSec

	// no validation rules for ApprovalDurationSec

	return nil
}

// UpdateBizConfigSellerRequestValidationError is the validation error returned
// by UpdateBizConfigSellerRequest.Validate if the designated constraints
// aren't met.
type UpdateBizConfigSellerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBizConfigSellerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBizConfigSellerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBizConfigSellerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBizConfigSellerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBizConfigSellerRequestValidationError) ErrorName() string {
	return "UpdateBizConfigSellerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBizConfigSellerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBizConfigSellerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBizConfigSellerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBizConfigSellerRequestValidationError{}

// Validate checks the field values on UpdateBizConfigSellerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateBizConfigSellerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// UpdateBizConfigSellerResponseValidationError is the validation error
// returned by UpdateBizConfigSellerResponse.Validate if the designated
// constraints aren't met.
type UpdateBizConfigSellerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBizConfigSellerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBizConfigSellerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBizConfigSellerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBizConfigSellerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBizConfigSellerResponseValidationError) ErrorName() string {
	return "UpdateBizConfigSellerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBizConfigSellerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBizConfigSellerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBizConfigSellerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBizConfigSellerResponseValidationError{}

// Validate checks the field values on GetBizConfigBySellerIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBizConfigBySellerIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return GetBizConfigBySellerIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetBizConfigBySellerIdRequestValidationError is the validation error
// returned by GetBizConfigBySellerIdRequest.Validate if the designated
// constraints aren't met.
type GetBizConfigBySellerIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBizConfigBySellerIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBizConfigBySellerIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBizConfigBySellerIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBizConfigBySellerIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBizConfigBySellerIdRequestValidationError) ErrorName() string {
	return "GetBizConfigBySellerIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBizConfigBySellerIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBizConfigBySellerIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBizConfigBySellerIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBizConfigBySellerIdRequestValidationError{}

// Validate checks the field values on GetBizConfigBySellerIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBizConfigBySellerIdResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentDurationSec

	// no validation rules for ApprovalDurationSec

	return nil
}

// GetBizConfigBySellerIdResponseValidationError is the validation error
// returned by GetBizConfigBySellerIdResponse.Validate if the designated
// constraints aren't met.
type GetBizConfigBySellerIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBizConfigBySellerIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBizConfigBySellerIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBizConfigBySellerIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBizConfigBySellerIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBizConfigBySellerIdResponseValidationError) ErrorName() string {
	return "GetBizConfigBySellerIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBizConfigBySellerIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBizConfigBySellerIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBizConfigBySellerIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBizConfigBySellerIdResponseValidationError{}
